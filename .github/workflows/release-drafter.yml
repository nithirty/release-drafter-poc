name: Release Drafter

on:
#   push:
#     # #branches to consider in the event; optional, defaults to all
#     branches:
#         - dev
  # pull_request event is required only for autolabele
  pull_request:
    # Only following types are handled by the action, but one can default to all as well
    types: [opened, reopened, synchronize]
    branches: 
        - dev
  # pull_request_target event is required for autolabeler to support PRs from fork
  # pull_request_target:
  #   types: [opened, reopened, synchronize]

permissions:
  contents: read

jobs:
  update_release_draft:
    permissions:
      # write permission is required to create a github release
      contents: write
      # write permission is required for autolabeler
      # otherwise, read permission is required at least
      pull-requests: write
    runs-on: ubuntu-latest
    steps:
      # (Optionaly) GitHub Enterprise requires GHE_HOST variable set
      #- name: Set GHE_HOST
      #  run: |
      #    echo "GHE_HOST=${GITHUB_SERVER_URL##https:\/\/}" >> $GITHUB_ENV

      # Drafts your next Release notes as Pull Requests are merged into "master"
      - name: Release Drafter
        id: ReleaseDrafter
        uses: release-drafter/release-drafter@v5
        with:
            commitish: dev            
        # (Optional) specify  the config name to use, relative to .github/. Default: release-drafter.yml
        # with:
        #   config-name: my-config.yml
        #   disable-autolabeler: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get latest draft release
        id: latest_release
        uses: octokit/request-action@v2.x
        with:
          route: GET /repos/{owner}/{repo}/releases
          owner: ${{ github.repository_owner }}
          repo: ${{ github.event.repository.name }}
          state: draft
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.x    

      - name: Extract resolved version
        id: extract_version
        run: |
          echo "resolvedVersion=$(python ./.github/extract_version.py '${{ steps.latest_release.outputs.data }}')" >> $GITHUB_ENV  